plugins {
    id 'java-library'
    id 'idea'
    id 'jacoco'
    id 'signing'
    id 'com.gradleup.shadow' version '8.3.6'
    id 'com.adarshr.test-logger' version '4.0.0'
    id 'ru.vyarus.java-lib' version '3.0.0'
    id 'ru.vyarus.github-info' version '2.0.0'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'net.researchgate.release' version '3.1.0'
    id 'com.google.cloud.tools.jib' version '3.4.0'
    id 'application'
}

// If you want GitHub info, configure it properly
github {
    user = 'kestra-io'
    license = 'Apache-2.0'
    licenseName = 'Apache-2.0'
}

// Jib configuration for Docker
jib {
    from {
        image = 'eclipse-temurin:21-jre'
    }
    to {
        image = 'kestra-sifflet-plugin:latest'
    }
    container {
        mainClass = 'io.kestra.cli.App'
        args = ['server', 'standalone']
    }
}

group = 'io.kestra.plugin'
description = 'Plugin template for Kestra'
version = '1.0.0-SNAPSHOT' // <-- set your plugin version here

def kestraVersion = "0.22.4"
def isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")

ext {
    kestraVersion = "0.22.4"
    lombokVersion = "1.18.30"
    slf4jVersion = "2.0.9"
    jacksonVersion = "2.15.3"
}

repositories {
    mavenCentral()
    maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://s01.oss.sonatype.org/content/repositories/releases/" }
    maven { url "https://packages.confluent.io/maven/" }
    maven { url "https://jitpack.io" }
    maven { url "https://maven.scijava.org/content/repositories/public/" }
    maven { url "https://repo.maven.apache.org/maven2/" }
    maven { url "https://maven.pkg.github.com/kestra-io/kestra" }
}

final targetJavaVersion = JavaVersion.VERSION_21

java {
    sourceCompatibility = targetJavaVersion
    targetCompatibility = targetJavaVersion
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs.add('-parameters')
}

// ====================================================================================
// Dependencies
// ====================================================================================
configurations {
    agent
}

dependencies {
    // Use Kestra BOM for version management
    implementation platform("io.kestra:kestra-bom:${kestraVersion}")
    testAnnotationProcessor platform("io.kestra:kestra-bom:${kestraVersion}")
    testImplementation platform("io.kestra:kestra-bom:${kestraVersion}")
    
    // Core Kestra dependencies
    implementation "io.kestra:core:${kestraVersion}"
    implementation "io.kestra:cli:${kestraVersion}"
    implementation "io.kestra:repository-memory:${kestraVersion}"
    implementation "io.kestra:storage-local:${kestraVersion}"
    implementation "io.kestra:runner-memory:${kestraVersion}"

    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"

    // Http Client
    implementation "com.squareup.okhttp3:okhttp:4.12.0"
    implementation "com.squareup.okhttp3:logging-interceptor:4.12.0"

    // Swagger
    implementation "io.swagger.core.v3:swagger-annotations:2.2.20"

    // Testing
    testImplementation "io.kestra:core:${kestraVersion}:test"
    testImplementation "io.kestra:tests:${kestraVersion}"
    testImplementation "io.kestra:script:${kestraVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.hamcrest:hamcrest:2.2"
    testImplementation "org.hamcrest:hamcrest-core:2.2"
    testImplementation "org.hamcrest:hamcrest-library"

    // Micronaut for testing
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testAnnotationProcessor "io.micronaut.validation:micronaut-validation-processor"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "io.micronaut:micronaut-jackson-databind"

    // Allure reports for test reporting
    testImplementation "io.qameta.allure:allure-junit5"

    // AspectJ Agent
    agent "org.aspectj:aspectjweaver:1.9.23"
}

// ====================================================================================
// Test Config
// ====================================================================================
test {
    useJUnitPlatform()
    jvmArgs = ["-javaagent:${configurations.agent.singleFile}"]
    finalizedBy jacocoTestReport
}

testlogger {
    theme = 'mocha-parallel'
    showExceptions = true
    showFullStackTraces = true
    showStandardStreams = true
    showPassedStandardStreams = false
    showSkippedStandardStreams = true
}

// ====================================================================================
// Jacoco
// ====================================================================================
jacocoTestReport {
    dependsOn test
}

// ====================================================================================
// Nexus Publish (sonatype / OSS publishing)
// ====================================================================================
nexusPublishing {
    repositoryDescription = "${project.group}:${rootProject.name}:${project.version}"
    useStaging = !isBuildSnapshot
    repositories {
        sonatype {
            nexusUrl.set(uri('https://s01.oss.sonatype.org/service/local/'))
            snapshotRepositoryUrl.set(uri('https://s01.oss.sonatype.org/content/repositories/snapshots/'))
        }
    }
}

// ====================================================================================
// Maven Publish
// ====================================================================================
tasks.withType(GenerateModuleMetadata).configureEach {
    suppressedValidationErrors.add('enforced-platform')
}

maven.pom {
    developers {
        developer {
            id = 'tchiotludo'
            name = 'Ludovic Dehon'
        }
    }
}

// ====================================================================================
// Shadow JAR
// ====================================================================================
shadowJar {
    archiveClassifier.set(null)
    mergeServiceFiles()
}

// ====================================================================================
// JAR Manifest
// ====================================================================================
jar {
    manifest {
        attributes(
                'X-Kestra-Name': project.name,
                'X-Kestra-Title': 'Template',
                'X-Kestra-Group': "${project.group}.templates",
                'X-Kestra-Description': project.description,
                'X-Kestra-Version': project.version
        )
    }
}

// ====================================================================================
// Release Plugin
// ====================================================================================
release {
    preCommitText = 'chore(version):'
    preTagCommitMessage = 'update to version'
    tagCommitMessage = 'tag version'
    newVersionCommitMessage = 'update snapshot version'
    tagTemplate = 'v${version}'
    buildTasks = ['classes']
    git {
        requireBranch.set('master')
    }
}

// ====================================================================================
// IDEA Plugin
// ====================================================================================
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

// Application configuration
application {
    mainClass = 'io.kestra.cli.App'
}

// Run configuration
run {
    args = ['server', 'standalone']
}

plugins {
    id 'java-library'
    id 'idea'
    id 'jacoco'
    id 'signing'
    id 'com.gradleup.shadow' version '8.3.6'
    id 'com.adarshr.test-logger' version '4.0.0'
    id 'ru.vyarus.java-lib' version '3.0.0'
    id 'ru.vyarus.github-info' version '2.0.0'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'net.researchgate.release' version '3.1.0'
}

// If you want GitHub info, configure it properly
github {
    user = 'kestra-io'
    licenseName = 'Apache-2.0'
}


group = 'io.kestra.plugin'
description = 'Plugin template for Kestra'
version = '1.0.0-SNAPSHOT' // <-- set your plugin version here

def kestraVersion = '0.17.0'  // <-- set the matching Kestra version here
def isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")

repositories {
    mavenLocal()
    mavenCentral()
    if (isBuildSnapshot) {
        maven { url = "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
    }
}

final targetJavaVersion = JavaVersion.VERSION_21

java {
    sourceCompatibility = targetJavaVersion
    targetCompatibility = targetJavaVersion
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs.add('-parameters')
}

// ====================================================================================
// Dependencies
// ====================================================================================
dependencies {
    // Kestra Platform (core setup)
    annotationProcessor enforcedPlatform("io.kestra:platform:$kestraVersion")
    implementation enforcedPlatform("io.kestra:platform:$kestraVersion")
    api enforcedPlatform("io.kestra:platform:$kestraVersion")

    // Lombok
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'

    // Kestra Core
    annotationProcessor "io.kestra:processor:$kestraVersion"
    compileOnly "io.kestra:core:$kestraVersion"
    compileOnly "io.kestra:script:$kestraVersion"

    // HTTP Client
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'

    // Sifflet API
    implementation 'com.sifflet:sifflet-api:1.0.0' // TODO: Replace with actual Sifflet API dependency

    // Test dependencies
    testAnnotationProcessor enforcedPlatform("io.kestra:platform:$kestraVersion")
    testImplementation enforcedPlatform("io.kestra:platform:$kestraVersion")

    testAnnotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'

    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testAnnotationProcessor "io.micronaut.validation:micronaut-validation-processor"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "io.micronaut:micronaut-jackson-databind"

    testImplementation "io.kestra:core:$kestraVersion"
    testImplementation "io.kestra:tests:$kestraVersion"
    testImplementation "io.kestra:script:$kestraVersion"
    testImplementation "io.kestra:repository-memory:$kestraVersion"
    testImplementation "io.kestra:runner-memory:$kestraVersion"
    testImplementation "io.kestra:storage-local:$kestraVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.hamcrest:hamcrest"
    testImplementation "org.hamcrest:hamcrest-library"

    // Allure reports for test reporting
    testImplementation "io.qameta.allure:allure-junit5"

    // AspectJ Agent
testImplementation "org.aspectj:aspectjweaver:1.9.23"
}

// ====================================================================================
// Test Config
// ====================================================================================
configurations {
    agent {
        canBeResolved = true
        canBeConsumed = true
    }
}

test {
    useJUnitPlatform()
    jvmArgs = ["-javaagent:${configurations.agent.singleFile}"]
    finalizedBy jacocoTestReport
}

testlogger {
    theme = 'mocha-parallel'
    showExceptions = true
    showFullStackTraces = true
    showStandardStreams = true
    showPassedStandardStreams = false
    showSkippedStandardStreams = true
}

// ====================================================================================
// Jacoco
// ====================================================================================
jacocoTestReport {
    dependsOn test
}

// ====================================================================================
// Nexus Publish (sonatype / OSS publishing)
// ====================================================================================
nexusPublishing {
    repositoryDescription = "${project.group}:${rootProject.name}:${project.version}"
    useStaging = !isBuildSnapshot
    repositories {
        sonatype {
            nexusUrl.set(uri('https://s01.oss.sonatype.org/service/local/'))
            snapshotRepositoryUrl.set(uri('https://s01.oss.sonatype.org/content/repositories/snapshots/'))
        }
    }
}

// ====================================================================================
// Maven Publish
// ====================================================================================
tasks.withType(GenerateModuleMetadata).configureEach {
    suppressedValidationErrors.add('enforced-platform')
}

maven.pom {
    developers {
        developer {
            id = 'tchiotludo'
            name = 'Ludovic Dehon'
        }
    }
}

// ====================================================================================
// Shadow JAR
// ====================================================================================
shadowJar {
    archiveClassifier.set(null)
    mergeServiceFiles()
}

// ====================================================================================
// JAR Manifest
// ====================================================================================
jar {
    manifest {
        attributes(
                'X-Kestra-Name': project.name,
                'X-Kestra-Title': 'Template',
                'X-Kestra-Group': "${project.group}.templates",
                'X-Kestra-Description': project.description,
                'X-Kestra-Version': project.version
        )
    }
}

// ====================================================================================
// Release Plugin
// ====================================================================================
release {
    preCommitText = 'chore(version):'
    preTagCommitMessage = 'update to version'
    tagCommitMessage = 'tag version'
    newVersionCommitMessage = 'update snapshot version'
    tagTemplate = 'v${version}'
    buildTasks = ['classes']
    git {
        requireBranch.set('master')
    }
}

// ====================================================================================
// IDEA Plugin
// ====================================================================================
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
